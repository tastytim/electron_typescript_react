import { app, BrowserWindow, ipcMain, Menu } from "electron";
import * as path from "path";
import { Tod } from "./utils/Types";
import fs from 'fs';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const MOVIES_PATH = path.join(__dirname , 'public','movie');
let mainWindow: BrowserWindow | null;
let addToDoWindow: BrowserWindow | null;
let todos: typeof Tod[] = [];
let categories = [];

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}


fs.readFile("db.json", (err ,jsonTodos ):void=>{
  if(!err){
    const oldTodos = JSON.parse(jsonTodos.toString());
    todos = oldTodos;
  }
})

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY + "?window=main");

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.on('closed', ()=>{
    const jsonTodos = JSON.stringify(todos);
    fs.writeFileSync('db.json',jsonTodos);
    console.log("saved")
    app.quit();
  })

  // SET MENU
  const mainMenu = Menu.buildFromTemplate(menuTemplate);
  Menu.setApplicationMenu(mainMenu);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const createAddToDoWindow = (): void => {
  addToDoWindow = new BrowserWindow({
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      sandbox: false,
      preload: path.join(__dirname, "preload.js"),
    },
    height: 500,
    width: 800,
    resizable: true,
  });

  // eslint-disable-next-line no-useless-concat

  addToDoWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY + "?window=new_todo");
  addToDoWindow.webContents.openDevTools();
  addToDoWindow.on("closed", () => {
    addToDoWindow = null;
  });

  addToDoWindow.setMenu(null);
};

const menuTemplate = [
  {
    label: "Menu",
    submenu: [
      {
        label: "New Todo",
        accelerator: process.platform === "darwin" ? "Command+N" : "Ctrl+N",
        click() {
          createAddToDoWindow();
        },
      },
      {
        label: "Quit",
        accelarator: process.platform === "darwin" ? "command+Q" : "Ctrl+Q",
        click() {
          app.quit();
        },
      },
    ],
  },
];

// COMMUNICAZIONE CON REACT
ipcMain.on("todo:list", (event) => {
  mainWindow?.webContents.send("todo:list", todos);
});

ipcMain.on("todo:add", (event, data: typeof Tod) => {
  todos.push({ text: data.text, id: data.id });
  mainWindow.webContents.send('todo:list',todos)
  addToDoWindow.close();
});

ipcMain.on("todo:clear", (event) => {
  todos = [];
});



ipcMain.on('categories:get', (event, data)=>{
  fs.readdir(MOVIES_PATH, function(err, items){
    categories = items;
    console.log();
    mainWindow.webContents.send('categories:list',categories);
  })
  mainWindow.webContents.send('list:')
})